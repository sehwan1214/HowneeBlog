{
  
    
        "post0": {
            "title": "Machine Learning Posting",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://sehwan1214.github.io/HowneeBlog/machine%20learning/2021/10/04/Markdown_test.html",
            "relUrl": "/machine%20learning/2021/10/04/Markdown_test.html",
            "date": " • Oct 4, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "제목!!",
            "content": "&#45936;&#51060;&#53552; &#51204;&#52376;&#47532; &#44592;&#48277; . 데이터 실수화(Data Vectorization) | 데이터 정제(Data Cleaning) | 데이터 통합(Data Integration) | 데이터 축소(Data Reduction) | 데이터 변환(Data Transformation) | 데이터 불균형(Data Imbalance) | 1. &#45936;&#51060;&#53552; &#49892;&#49688;&#54868;(Data Vectorization) . 범주형 자료의 실수화(Categorial data Vectorization) | . Skikit-learn의 DictVectorizer 함수 | CSR 표현식 (Compressed Sparse Row) | 텍스트 자료의 실수화(Text data Vectorization) | . 단어의 출현 횟수를 이용한 데이터 실수화 | TF-IDF 기법 | &#48276;&#51452;&#54805; &#51088;&#47308;&#51032; &#49892;&#49688;&#54868;(Categorial data Vectorization) . x = [{&#39;city&#39;:&#39;seoul&#39;, &#39;temp&#39;:10.0},{&#39;city&#39;:&#39;Dubai&#39;, &#39;temp&#39;:33.5},{&#39;city&#39;:&#39;LA&#39;, &#39;temp&#39;:20.0}] x . [{&#39;city&#39;: &#39;seoul&#39;, &#39;temp&#39;: 10.0}, {&#39;city&#39;: &#39;Dubai&#39;, &#39;temp&#39;: 33.5}, {&#39;city&#39;: &#39;LA&#39;, &#39;temp&#39;: 20.0}] . from sklearn.feature_extraction import DictVectorizer vec = DictVectorizer(sparse=False) vec.fit_transform(x) # vec.fit_transform(x) 자체가 하나의 type을 가진다 print(type(vec.fit_transform(x))) . array([[ 0. , 0. , 1. , 10. ], [ 1. , 0. , 0. , 33.5], [ 0. , 1. , 0. , 20. ]]) . # 희소행렬의 메모리 낭비를 해결하기 위한 방법 vec1 = DictVectorizer(sparse=True) # 메모리를 줄이기 위해 sparse=True -&gt; 압축되어 있는 형태 x1 = vec1.fit_transform(x) x1 . &lt;3x4 sparse matrix of type &#39;&lt;class &#39;numpy.float64&#39;&gt;&#39; with 6 stored elements in Compressed Sparse Row format&gt; . &#53581;&#49828;&#53944; &#51088;&#47308;&#51032; &#49892;&#49688;&#54868;(Text data Vectorization) . text = {&#39;떴다 떴다 비행기 날아라 날아라&#39;, &#39;높이 높이 날아라 우리 비행기&#39;, &#39;내가 만든 비행기 날아라 날아라&#39;, &#39;멀리 멀리 날아라 우리 비행기&#39;} text . {&#39;내가 만든 비행기 날아라 날아라&#39;, &#39;높이 높이 날아라 우리 비행기&#39;, &#39;떴다 떴다 비행기 날아라 날아라&#39;, &#39;멀리 멀리 날아라 우리 비행기&#39;} . from sklearn.feature_extraction.text import CountVectorizer vec2 = CountVectorizer() # default는 sparse=True t = vec2.fit_transform(text).toarray() # sparse=True를 풀고 text를 수량화 배열 자료로 변환, toarray() -&gt; CSR 표현의 압축을 풀기 위해 사용 import pandas as pd t1 = pd.DataFrame(t,columns=vec2.get_feature_names()) t1 . 날아라 내가 높이 떴다 만든 멀리 비행기 우리 . 0 1 | 0 | 0 | 0 | 0 | 2 | 1 | 1 | . 1 2 | 1 | 0 | 0 | 1 | 0 | 1 | 0 | . 2 1 | 0 | 2 | 0 | 0 | 0 | 1 | 1 | . 3 2 | 0 | 0 | 2 | 0 | 0 | 1 | 0 | . # 1. 가중치 재계산 2. 높은 빈도에 낮은 가중치, 낮은 빈도에 높은 가중치 from sklearn.feature_extraction.text import TfidfVectorizer tfid = TfidfVectorizer() x2 = tfid.fit_transform(text).toarray() # 높은 빈도는 낮은 가중치, 낮은 빈도는 높은 가중치 x3 = pd.DataFrame(x2,columns=tfid.get_feature_names()) x3 . 날아라 내가 높이 떴다 만든 멀리 비행기 우리 . 0 0.450735 | 0.000000 | 0.00000 | 0.86374 | 0.000000 | 0.00000 | 0.225368 | 0.000000 | . 1 0.569241 | 0.545415 | 0.00000 | 0.00000 | 0.545415 | 0.00000 | 0.284620 | 0.000000 | . 2 0.229589 | 0.000000 | 0.00000 | 0.00000 | 0.000000 | 0.87992 | 0.229589 | 0.346869 | . 3 0.229589 | 0.000000 | 0.87992 | 0.00000 | 0.000000 | 0.00000 | 0.229589 | 0.346869 | . 2. &#45936;&#51060;&#53552; &#51221;&#51228;(Data Cleaning) . 결측 데이터 채우기(Empty Values) | . 결측 데이터: np.nan, npNAN, None | 평균(mean), 중위수(median), 최빈수(most frequent value)로 대처하는 기법 | 사용가능함수 -&gt; sklearn의 Imputer() | &#44208;&#52769; &#45936;&#51060;&#53552; &#52292;&#50864;&#44592;(Empty Values) . import numpy as np x_miss = np.array([[1,2,3,None],[5,np.NAN,7,8],[None,10,11,12],[13,np.NAN,15,16]]) x_miss . array([[1, 2, 3, None], [5, nan, 7, 8], [None, 10, 11, 12], [13, nan, 15, 16]], dtype=object) . from sklearn.impute import SimpleImputer im1 = SimpleImputer(strategy=&#39;mean&#39;) im1.fit_transform(x_miss) # 열의 평균값으로 대체 im2 = SimpleImputer(strategy=&#39;median&#39;) im2.fit_transform(x_miss) # 열의 중간값으로 대체 im3 = SimpleImputer(strategy=&#39;most_frequent&#39;) im3.fit_transform(x_miss) # 열의 최빈값으로 대체 . array([[ 1., 2., 3., 12.], [ 5., 6., 7., 8.], [ 5., 10., 11., 12.], [13., 6., 15., 16.]]) . 3. &#45936;&#51060;&#53552; &#53685;&#54633;(Data Integration) . 데이터 통합 | . Pandas의 merge()함수 사용 | Pandas의 df.dtypes -&gt; 변수의 자료 타입 확인 | &#45936;&#51060;&#53552; &#53685;&#54633; . #df1 import pandas as pd df1 = pd.read_csv(&quot;train.csv&quot;, engine=&#39;python&#39;) print(df1.shape) type(df1) df1.head() . (1017209, 9) . Store DayOfWeek Date Sales Customers Open Promo StateHoliday SchoolHoliday . 0 1 | 5 | 2015-07-31 | 5263 | 555 | 1 | 1 | 0 | 1 | . 1 2 | 5 | 2015-07-31 | 6064 | 625 | 1 | 1 | 0 | 1 | . 2 3 | 5 | 2015-07-31 | 8314 | 821 | 1 | 1 | 0 | 1 | . 3 4 | 5 | 2015-07-31 | 13995 | 1498 | 1 | 1 | 0 | 1 | . 4 5 | 5 | 2015-07-31 | 4822 | 559 | 1 | 1 | 0 | 1 | . df2 = pd.read_csv(&quot;store.csv&quot;, engine=&#39;python&#39;) print(df2.shape) type(df2) df2.head() . (1115, 10) . Store StoreType Assortment CompetitionDistance CompetitionOpenSinceMonth CompetitionOpenSinceYear Promo2 Promo2SinceWeek Promo2SinceYear PromoInterval . 0 1 | c | a | 1270.0 | 9.0 | 2008.0 | 0 | NaN | NaN | NaN | . 1 2 | a | a | 570.0 | 11.0 | 2007.0 | 1 | 13.0 | 2010.0 | Jan,Apr,Jul,Oct | . 2 3 | a | a | 14130.0 | 12.0 | 2006.0 | 1 | 14.0 | 2011.0 | Jan,Apr,Jul,Oct | . 3 4 | c | c | 620.0 | 9.0 | 2009.0 | 0 | NaN | NaN | NaN | . 4 5 | a | a | 29910.0 | 4.0 | 2015.0 | 0 | NaN | NaN | NaN | . df = pd.merge(df1,df2,on=&#39;Store&#39;) print(df.shape) df.head() . (1017209, 18) . Store DayOfWeek Date Sales Customers Open Promo StateHoliday SchoolHoliday StoreType Assortment CompetitionDistance CompetitionOpenSinceMonth CompetitionOpenSinceYear Promo2 Promo2SinceWeek Promo2SinceYear PromoInterval . 0 1 | 5 | 2015-07-31 | 5263 | 555 | 1 | 1 | 0 | 1 | c | a | 1270.0 | 9.0 | 2008.0 | 0 | NaN | NaN | NaN | . 1 1 | 4 | 2015-07-30 | 5020 | 546 | 1 | 1 | 0 | 1 | c | a | 1270.0 | 9.0 | 2008.0 | 0 | NaN | NaN | NaN | . 2 1 | 3 | 2015-07-29 | 4782 | 523 | 1 | 1 | 0 | 1 | c | a | 1270.0 | 9.0 | 2008.0 | 0 | NaN | NaN | NaN | . 3 1 | 2 | 2015-07-28 | 5011 | 560 | 1 | 1 | 0 | 1 | c | a | 1270.0 | 9.0 | 2008.0 | 0 | NaN | NaN | NaN | . 4 1 | 1 | 2015-07-27 | 6102 | 612 | 1 | 1 | 0 | 1 | c | a | 1270.0 | 9.0 | 2008.0 | 0 | NaN | NaN | NaN | . df.dtypes . Store int64 DayOfWeek int64 Date object Sales int64 Customers int64 Open int64 Promo int64 StateHoliday object SchoolHoliday int64 StoreType object Assortment object CompetitionDistance float64 CompetitionOpenSinceMonth float64 CompetitionOpenSinceYear float64 Promo2 int64 Promo2SinceWeek float64 Promo2SinceYear float64 PromoInterval object dtype: object . print(len(df[&#39;Store&#39;].unique())) print(len(df[&#39;Date&#39;].unique())) # unique -&gt; 독립적인 개수 print(df[&#39;DayOfWeek&#39;].value_counts()) # value_counts() -&gt; 해당 value의 개수 . 1115 942 1023 942 666 942 675 942 163 942 674 942 ... 900 758 902 758 903 758 904 758 512 758 Name: Store, Length: 1115, dtype: int64 . 5. &#45936;&#51060;&#53552; &#48320;&#54872;(Data Transformation) . 데이터 변환 법 | . 표준화(Standardization) | 정규화(Normalization) | &#45936;&#51060;&#53552; &#48320;&#54872; &#48277; . x = (x - mean(x)) / sd(x) # sd(x) -&gt; 표준편차 # 정규화(Normalization) x = (x - min(x)) / (max(x) - min(x)) # 정규화가 표준화보다 유용하다. 단, 데이터 특성이 bell-shape이거나 이상치(noise가 큼, empty data가 많음)가 있을 경우에는 표준화가 유용하다. . NameError Traceback (most recent call last) &lt;ipython-input-34-651a4821c23e&gt; in &lt;module&gt;() 1 # 표준화(Standardization) 2 -&gt; 3 x = (x - mean(x)) / sd(x) # sd(x) -&gt; 표준편차 NameError: name &#39;x&#39; is not defined . 6. &#45936;&#51060;&#53552; &#48520;&#44512;&#54805;(Data Imbalance) . 과소표집(undersampling) . | 과대표집(oversampling) . | . SMOTE(Synthetic minority oversampling technique) | ADASYN(adaptive synthetic sampling method) | from collections import Counter from sklearn.datasets import make_classification from imblearn.over_sampling import SMOTE, ADASYN # n_feature 변경, n_informative와 n_redundant 추가 x, y = make_classification(n_classes=3, weights=[0.03,0.07,0.9], n_features=2, n_informative=2, n_redundant=0, n_clusters_per_class=1, n_samples=200, random_state=10) print(&#39;Original dataset shape %s &#39; %Counter(y) ) . Original dataset shape Counter({2: 180, 1: 14, 0: 6}) . import matplotlib.pyplot as plt plt.scatter(x[:,0], x[:,1], marker = &#39;o&#39;, c=y, s=100, edgecolor = &quot;k&quot;, linewidth=1) plt.xlabel(&quot;$x_1$&quot;) plt.ylabel(&quot;$x_2$&quot;) plt.show() . &#44284;&#45824;&#54364;&#51665;(oversampling) . sm = SMOTE(random_state=42) x_res, y_res = sm.fit_resample(x,y) print(&#39;Resampled dataset shape %s&#39; % Counter(y_res)) . Resampled dataset shape Counter({2: 180, 1: 180, 0: 180}) . /usr/local/lib/python3.7/dist-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function safe_indexing is deprecated; safe_indexing is deprecated in version 0.22 and will be removed in version 0.24. warnings.warn(msg, category=FutureWarning) /usr/local/lib/python3.7/dist-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function safe_indexing is deprecated; safe_indexing is deprecated in version 0.22 and will be removed in version 0.24. warnings.warn(msg, category=FutureWarning) . import matplotlib.pyplot as plt plt.scatter(x_res[:,0], x_res[:,1], marker=&#39;o&#39;, c=y_res, s=100, edgecolor=&quot;k&quot;, linewidth=1) plt.xlabel(&quot;$x_1$&quot;) plt.ylabel(&quot;$x_2$&quot;) plt.show() . ada = ADASYN(random_state=0) x_syn, y_syn = ada.fit_resample(x,y) print(&#39;Resampled dataset shape from ADASYN %s&#39; % Counter(y_syn)) . Resampled dataset shape from ADASYN Counter({2: 180, 1: 179, 0: 178}) . /usr/local/lib/python3.7/dist-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function safe_indexing is deprecated; safe_indexing is deprecated in version 0.22 and will be removed in version 0.24. warnings.warn(msg, category=FutureWarning) /usr/local/lib/python3.7/dist-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function safe_indexing is deprecated; safe_indexing is deprecated in version 0.22 and will be removed in version 0.24. warnings.warn(msg, category=FutureWarning) . import matplotlib.pyplot as plt plt.scatter(x_syn[:,0], x_syn[:,1], marker=&#39;o&#39;, c=y_syn, s=100, edgecolor=&quot;k&quot;, linewidth=1) plt.xlabel(&quot;$x_1$&quot;) plt.ylabel(&quot;$x_2$&quot;) plt.show() . &#44284;&#49548;&#54364;&#51665;(undersampling) . from imblearn.under_sampling import NearMiss # define the undersampling method undersample = NearMiss(version=3, n_neighbors_ver3=3) # transform the dataset x_under, y_under = undersample.fit_resample(x,y) . /usr/local/lib/python3.7/dist-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function safe_indexing is deprecated; safe_indexing is deprecated in version 0.22 and will be removed in version 0.24. warnings.warn(msg, category=FutureWarning) /usr/local/lib/python3.7/dist-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function safe_indexing is deprecated; safe_indexing is deprecated in version 0.22 and will be removed in version 0.24. warnings.warn(msg, category=FutureWarning) /usr/local/lib/python3.7/dist-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function safe_indexing is deprecated; safe_indexing is deprecated in version 0.22 and will be removed in version 0.24. warnings.warn(msg, category=FutureWarning) /usr/local/lib/python3.7/dist-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function safe_indexing is deprecated; safe_indexing is deprecated in version 0.22 and will be removed in version 0.24. warnings.warn(msg, category=FutureWarning) /usr/local/lib/python3.7/dist-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function safe_indexing is deprecated; safe_indexing is deprecated in version 0.22 and will be removed in version 0.24. warnings.warn(msg, category=FutureWarning) /usr/local/lib/python3.7/dist-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function safe_indexing is deprecated; safe_indexing is deprecated in version 0.22 and will be removed in version 0.24. warnings.warn(msg, category=FutureWarning) /usr/local/lib/python3.7/dist-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function safe_indexing is deprecated; safe_indexing is deprecated in version 0.22 and will be removed in version 0.24. warnings.warn(msg, category=FutureWarning) /usr/local/lib/python3.7/dist-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function safe_indexing is deprecated; safe_indexing is deprecated in version 0.22 and will be removed in version 0.24. warnings.warn(msg, category=FutureWarning) . import matplotlib.pyplot as plt plt.scatter(x_under[:,0], x_under[:,1], marker=&#39;o&#39;, c=y_under, s=100, edgecolor=&quot;k&quot;, linewidth=1) plt.xlabel(&quot;$x_1$&quot;) plt.ylabel(&quot;$x_2$&quot;) plt.show() .",
            "url": "https://sehwan1214.github.io/HowneeBlog/jupyter/machine%20learning/2021/10/03/_10_04_%EB%8D%B0%EC%9D%B4%ED%84%B0_%EC%A0%84%EC%B2%98%EB%A6%AC.html",
            "relUrl": "/jupyter/machine%20learning/2021/10/03/_10_04_%EB%8D%B0%EC%9D%B4%ED%84%B0_%EC%A0%84%EC%B2%98%EB%A6%AC.html",
            "date": " • Oct 3, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://sehwan1214.github.io/HowneeBlog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://sehwan1214.github.io/HowneeBlog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://sehwan1214.github.io/HowneeBlog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://sehwan1214.github.io/HowneeBlog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}